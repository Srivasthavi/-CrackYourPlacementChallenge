#DAY-2: 16-05-2022


PROBLEM_1:Set Matrix Zeroes
  Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
  You must do it in place.
  Example 1:
  Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
  Output: [[1,0,1],[0,0,0],[1,0,1]]
  
  CODE:
  class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        lr=[]
        ll=[]
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j]==0:
                    lr.append(i)
                    ll.append(j)
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if i in lr:
                    matrix[i][j]=0
                elif j in ll:
                    matrix[i][j]=0
                    
                
    EXPLANATION:
    1. first we parse through the matrix and save the row and column indexes of those values of the matrix which are equal to 0
    2. then we parese through the matrix again but this time if the index value is in row or column index list then we make that value of the matrix 0
    
    
PROBLEM_2: MOVE ZEROS
 Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
  Note that you must do this in-place without making a copy of the array.
  Example 1:
  Input: nums = [0,1,0,3,12]
  Output: [1,3,12,0,0]
  
  CODE:
  class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        ind=0
        for i in nums:
            if i==0:
                nums.remove(i)
                nums.append(0)
            
                
    EXPLANATION:
    1. first we parse through the list if the value is equal to zero we remove it and then append it to the end of the list
    
PROBLEM_3: Best Time to Buy and Sell Stock
  You are given an array prices where prices[i] is the price of a given stock on the ith day.
  You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
  Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
  Example 1:
  Input: prices = [7,1,5,3,6,4]
  Output: 5
  Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
  Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
  
  CODE:
  class Solution:
      def maxProfit(self, prices: List[int]) -> int:
          left=0
          right=1
          m=0
          while right < len(prices):
              if prices[right] < prices[left]:
                  left = right
              else:
                  p = prices[right] - prices[left]
                  m = max(m,p)
              right = right + 1
          return m
    
    EXPLANATION:
    1. first we check the right side values to the left side values as we cannot sell an item without buying it
    2. we check for the difference to calculate the profit if the right side value is more than left side
    3. if it is then we find the max profit calculated so far and then change the left side index value to the right side index value to check for others to reduce the time complexity

PROBLEM_4:
  Given an array of n integers where each value represents the number of chocolates in a packet. Each packet can have a variable number of chocolates. There are m students, the task is to distribute chocolate packets such that: 
  Each student gets one packet.
  The difference between the number of chocolates in the packet with maximum chocolates and packet with minimum chocolates given to the students is minimum.
  Examples:
  Input : arr[] = {7, 3, 2, 4, 9, 12, 56} , m = 3 
  Output: Minimum Difference is 2 
  Explanation:
  We have seven packets of chocolates and 
  we need to pick three packets for 3 students 
  If we pick 2, 3 and 4, we get the minimum 
  difference between maximum and minimum packet 
  sizes.
  
  CODE:
  def findMinDiff(arr, n, m):
    if (m==0 or n==0):
        return 0
    arr.sort()
    if (n < m):
        return -1
    md = arr[n-1] - arr[0]
    for i in range(len(arr) - m + 1):
        md = min(md ,  arr[i + m - 1] - arr[i])
    return md
    
   EXPLANATION:
   1. basically we check for the min diff between the highest and lowest packet we take 
   2. first we check whether the number of children or the number of packets ==0 cuz if either is 0 then there will be no distribution so its 0
   3. Now we check whether the number of packets is < then the no of children cuz then each child wont recieve a packet which means that test case fails so we return -1
   4. Now we sort the list to check which consecutive pakcets we can take with the min diff
   5. we parse through the sorted list chekc the difference between the highest packet chosen and lowest packet chosen and then check for the min difference and return that value
  
PROBLEM_5:Two Sum

  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
  You may assume that each input would have exactly one solution, and you may not use the same element twice.
  You can return the answer in any order.
  Example 1:
  Input: nums = [2,7,11,15], target = 9
  Output: [0,1]
  Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
  
  CODE:
  class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                if nums[i]+nums[j]==target:
                    return([i,j])
  EXPLANATION:
  1. we just parse through the list checking each value with the other to see if their sum is equal to the targe tvalue if it is then we return its index values
