#DAY-1: 15-05-2022

PROBLEM-1:FIND DUPLICATE NUMBER

    Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
    There is only one repeated number in nums, return this repeated number.
    You must solve the problem without modifying the array nums and uses only constant extra space.
    Example 1:
    Input: nums = [1,3,4,2,2]
    Output: 2
    
    CODE:
      class Solution:
          def findDuplicate(self, nums: List[int]) -> int:
              nums.sort()
              for i in range(1,len(nums)):
                  if nums[i-1]==nums[i]:
                      break
              return nums[i]
              
    EXPLANATION:
    1. first sort the given array
    2. to check for the duplicate value check teh previous value with the current value 
    3. if they are the same then break out of the loop and return that value
    

PROBLEM_2: SORT THE COLORS
    Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
    We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
    You must solve this problem without using the library's sort function.
    Example 1:
    Input: nums = [2,0,2,1,1,0]
    Output: [0,0,1,1,2,2]

    CODE:
    class Solution:
        def sortColors(self, nums: List[int]) -> None:
            """
            Do not return anything, modify nums in-place instead.
            """
            for i in range(len(nums)):
                for j in range(i+1,len(nums)):
                    if nums[i]>nums[j]:
                        nums[i],nums[j]=nums[j],nums[i]
     EXPLANATION:
     1. we sort through the array using the loop and swapping the values when the initial value is greater (normal sort method)
     
 PROBLEM_3: REMOVE THE DUPLICATES
    Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.
    Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.
    Return k after placing the final result in the first k slots of nums.
    Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.
    Custom Judge:
    The judge will test your solution with the following code:
    int[] nums = [...]; // Input array
    int[] expectedNums = [...]; // The expected answer with correct length
    int k = removeDuplicates(nums); // Calls your implementation
    assert k == expectedNums.length;
    for (int i = 0; i < k; i++) {
        assert nums[i] == expectedNums[i];
    }
    If all assertions pass, then your solution will be accepted.
    Example 1:
    Input: nums = [1,1,2]
    Output: 2, nums = [1,2,_]
    Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
    It does not matter what you leave beyond the returned k (hence they are underscores).
    
    
    CODE:
    
   class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        c = 1
        k=1
        for i in range(1,len(nums)):
            if nums[i-1] != nums[i]:
                nums[k] = nums[i]
                c+=1
                k+=1
        return k
        
     EXPLANTION:
     1. First we delclare a count variable and indexing variable.
     2. As we parse through the list if the previous value is not equal to the next value then we append it to the beginning of the list using the declared index varibale adn increment the cout adn index value.
     3. If they are equal we ignore them.
     Basically we are bringing the non repeated elements to the beginning and return the count of how may values are present excluding the non repeated ones.
